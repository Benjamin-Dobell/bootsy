{"name":"Bootsy","tagline":"A beautiful wysiwyg editor with image uploads for Rails","body":"# Bootsy\r\n\r\n[![Gem Version](https://badge.fury.io/rb/bootsy.png)](http://badge.fury.io/rb/bootsy)\r\n[![Build Status](https://secure.travis-ci.org/volmer/bootsy.png?branch=master)](http://travis-ci.org/volmer/bootsy)\r\n[![Dependency Status](https://gemnasium.com/volmer/bootsy.png)](https://gemnasium.com/volmer/bootsy)\r\n[![Code Climate](https://codeclimate.com/github/volmer/bootsy.png)](https://codeclimate.com/github/volmer/bootsy)\r\n[![Coverage Status](https://coveralls.io/repos/volmer/bootsy/badge.png?branch=master)](https://coveralls.io/r/volmer/bootsy)\r\n\r\n*Bootsy* is a WYSIWYG editor for Rails based on\r\n[Bootstrap3-wysihtml5](https://github.com/bootstrap-wysiwyg/bootstrap3-wysiwyg) with image uploads using\r\n[CarrierWave](https://github.com/carrierwaveuploader/carrierwave).\r\n\r\n### Live demo\r\n\r\n* [bootsy-demo.herokuapp.com](http://bootsy-demo.herokuapp.com/)\r\n[![image](https://f.cloud.github.com/assets/301187/1365250/e1b7ba80-3854-11e3-9bfe-8bd1e090aca8.png)](http://bootsy-demo.herokuapp.com/)\r\n\r\n\r\n## Requirements\r\n\r\n* ImageMagick or GraphicsMagick (for MiniMagick);\r\n* Rails `4`;\r\n* [Bootstrap `3`](http://getbootstrap.com/) fully installed in your app.\r\n\r\n\r\n## Installation\r\n\r\n1. Add Bootsy to your Gemfile:\r\n  ```ruby\r\n  gem 'bootsy'\r\n  ```\r\n\r\n2. Run the bundle command to install it:\r\n  ```console\r\n  bundle install\r\n  ```\r\n\r\n3. Run the install generator:\r\n  ```console\r\n  rails generate bootsy:install\r\n  ```\r\n  It will include the javascripts and stylesheets in the assets pipeline,\r\n  create the `bootsy.rb` initializer and add a copy of the english translations.\r\n\r\n  **Note:** If your project uses SASS or LESS and `application.css` does not exist,\r\n  you will be required to require bootsy manually using `*= require bootsy` or if you prefer\r\n  to import assets yourself `@import \"bootsy\";`\r\n\r\n4. Add and run migrations:\r\n  ```console\r\n  rake bootsy:install:migrations\r\n  rake db:migrate\r\n  ```\r\n\r\n\r\n## Usage\r\n\r\nJust call `bootsy_area` in your `FormBuilder` instances, the\r\nsame way you'd call `textarea`. Example:\r\n```erb\r\n<%= form_for(@post) do |f| %>\r\n  <%= f.label :title %>\r\n  <%= f.text_field :title %>\r\n\r\n  <%= f.label :content %>\r\n  <%= f.bootsy_area :content %>\r\n\r\n  <%= f.submit %>\r\n<% end %>\r\n```\r\n\r\nBootsy will group the uploaded images as galleries and associate them to one of\r\nyour models. For instance, if you have a `Post` model and you want to use `bootsy_area`\r\nwith it, you must include the `Bootsy::Container` module:\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  include Bootsy::Container\r\nend\r\n```\r\n\r\nDon't forget to ensure the association between your model objects with Bootsy\r\nimage galleries. For `strong_parameters`, you must whitelist the `bootsy_image_gallery_id` parameter\r\nin your controller:\r\n```ruby\r\nprivate\r\n\r\ndef post_params\r\n  params.require(:post).permit(:title, :content, :bootsy_image_gallery_id)\r\nend\r\n```\r\n\r\n\r\n## Bootsy with [Simple Form](https://github.com/plataformatec/simple_form) builders\r\n\r\nYou can use `bootsy` as an input type in `SimpleForm::FormBuilder` instances. Example:\r\n```erb\r\n<%= simple_form_for @post do |f| %>\r\n  <%= f.input :title %>\r\n\r\n  <%= f.input :content, as: :bootsy %>\r\n\r\n  <%= f.button :submit %>\r\n<% end %>\r\n```\r\n\r\n\r\n## Editor options\r\n\r\nYou can customize Bootsy through a hash of `editor_options`:\r\n\r\n\r\n### Enable/disable features\r\n\r\nYou can enable and disable features as you like. For instance, if you don't want link and color features:\r\n```erb\r\n<%= f.bootsy_area :my_attribute, editor_options: { link: false, color: false } %>\r\n```\r\nAvailable options are: `:blockquote`, `:font_styles`, `:emphasis`, `:lists`, `:html`, `:link`, `:image` and `:color`.\r\n\r\n\r\n### Alert of unsaved changes\r\n\r\nBy default Bootsy alerts the user about unsaved changes if the page is closed or reloaded. You can disable\r\nthis feature with:\r\n```erb\r\n<%= f.bootsy_area :my_attribute, editor_options: { alert_unsaved: false } %>\r\n```\r\n\r\n## Uploads\r\n\r\nIf you don't want to have image uploads, just call `bootsy_area` in a form builder not\r\nassociated to a `Bootsy::Container` model. This way users will still be able to insert\r\nimages in the text area using an external image URL.\r\n\r\n\r\n## Configuration\r\n\r\nYou can set the default editor options, image sizes available (small, medium,\r\nlarge and/or its original), dimensions and more. Take a look at Bootsy's initalizer\r\nfile `/config/initializers/bootsy.rb` in your app and feel free to uncomment and change\r\nthe options as you like.\r\n\r\n\r\n## I18n\r\n\r\nBootsy defines some I18n keys. English translations are added by default to your\r\n`config/locales` directory as `bootsy.en.yml`. You can use it as a template\r\nto translate Bootsy to your language.\r\n[Here are some examples](https://github.com/volmer/bootsy/tree/master/config/locales).\r\n\r\nYou also need to translate Bootsy on the JavaScript side. Just follow\r\n[this example](https://github.com/volmer/bootsy/blob/master/app/assets/javascripts/bootsy/locales/en.js).\r\nBootsy will try to guess the locale based on the `lang` attribute of the page's `<html>` tag.\r\nYou can set the locale directly by setting a `data-bootsy-locale` attribute on your `<textarea>`.\r\n\r\n\r\n## License\r\n\r\nMIT License. Copyright 2012-2015 Volmer Soares\r\n","google":"UA-40000211-1","note":"Don't delete this file! It's used internally to help with page regeneration."}