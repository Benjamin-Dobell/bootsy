{"name":"Bootsy","tagline":"A beautiful wysiwyg editor with image uploads for Rails","body":"# Bootsy\r\n\r\n[![Gem Version](https://badge.fury.io/rb/bootsy.png)](http://badge.fury.io/rb/bootsy)\r\n[![Build Status](https://secure.travis-ci.org/volmer/bootsy.png?branch=master)](http://travis-ci.org/volmer/bootsy)\r\n[![Dependency Status](https://gemnasium.com/volmer/bootsy.png)](https://gemnasium.com/volmer/bootsy)\r\n[![Code Climate](https://codeclimate.com/github/volmer/bootsy.png)](https://codeclimate.com/github/volmer/bootsy)\r\n[![Coverage Status](https://coveralls.io/repos/volmer/bootsy/badge.png?branch=master)](https://coveralls.io/r/volmer/bootsy)\r\n\r\n*Bootsy* is a WYSIWYG solution for Rails based on [Bootstrap-wysihtml5](https://github.com/jhollingworth/bootstrap-wysihtml5) which includes image uploads via [CarrierWave](https://github.com/carrierwaveuploader/carrierwave).\r\n\r\n\r\n## Requirements\r\n\r\n* Ruby `2.0` or `1.9.3`;\r\n* ImageMagick or GraphicsMagick (for MiniMagick);\r\n* Rails `4.0` (you can get a *temporary* support for Rails `3.2` on [this branch](https://github.com/volmer/bootsy/tree/rails-3.2));\r\n* [Twitter Bootstrap](http://twitter.github.com/bootstrap/) properly added on your application.\r\n\r\n\r\n## Installation\r\n\r\n1. Add Bootsy to your Gemfile:\r\n```ruby\r\ngem 'bootsy'\r\n```\r\n\r\n2. Run the bundle command to install it:\r\n```console\r\nbundle install\r\n```\r\n\r\n3. Run the install generator:\r\n```console\r\nrails g bootsy:install\r\n```\r\n\r\n4. Add and run migrations (if you're using ActiveRecord):\r\n```console\r\nrake bootsy:install:migrations\r\nrake db:migrate\r\n```\r\n\r\n\r\n## Usage\r\n\r\nJust call the brand new method `bootsy_area` in your `FormBuilder` instances, the same way you'd call the basic `textarea` method. Example:\r\n```erb\r\n<%= form_for(@post) do |f| %>\r\n  <%= f.label :title %><br />\r\n  <%= f.text_field :title %>\r\n\r\n  <%= f.label :content %><br />\r\n  <%= f.bootsy_area :content %>\r\n\r\n  <%= f.submit %>\r\n<% end %>\r\n```\r\n\r\nBootsy will group the uploaded images as galleries and associate them to one of your models. For example, if you have a `Post` model and you want to use `bootsy_area` with it, then you should include the `Bootsy::Container` module:\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  include Bootsy::Container\r\n\r\n  attr_accessible :content, :title\r\nend\r\n```\r\n\r\nDon't forget to ensure the association of new instances of your model with Bootsy image galleries. For `strong_parameters`, you must allow the parameter `bootsy_image_gallery_id` in your controllers. Example:\r\n```ruby\r\nprivate\r\n# Never trust parameters from the scary internet, only allow the white list through.\r\ndef post_params\r\n  params.require(:post).permit(:title, :content, :bootsy_image_gallery_id)\r\nend\r\n```\r\n\r\n## Editor options\r\n\r\nIt is possible to customize how the editor is displayed and its behavior by passing a hash `editor_options` to your `bootsy_area`.\r\n\r\n\r\n### Buttons\r\n\r\nYou can enable/disable the buttons available on the editor. For example, if you want to disable the link and color buttons:\r\n```erb\r\n<%= f.bootsy_area :my_attribute, editor_options: {link: false, color: false} %>\r\n```\r\nAvailable options are: `:font_styles`, `:emphasis`, `:lists`, `:html`, `:link`, `:image` and `:color`.\r\n\r\n\r\n### Alert for usaved changes\r\n\r\nBy default, Bootsy alerts for unsaved changes if the user attempts to unload the window. You can disable this behaviour by doing:\r\n```erb\r\n<%= f.bootsy_area :my_attribute, editor_options: {alert_unsaved: false} %>\r\n```\r\n\r\n## Uploader\r\n\r\nIt's also possible to use Bootsy without the image upload feature. Just call `bootsy_area` in a form builder not associated to a `Bootsy::Container` model. This way users can insert images in their texts by providing an image url.\r\n\r\n\r\n## Configuration\r\n\r\nYou can set the default editor options, image sizes available (small, medium, large and/or its original), its dimensions and more. Take a look at the initalizer file, `/config/initializers/bootsy.rb`.\r\n\r\n\r\n## I18n\r\n\r\nBootsy defines some i18n keys. The english translation is automatically added to your `config/locales` directory as `bootsy.en.yml`. You can follow that template in order to translate Bootsy to your language. You can find some examples [here](https://github.com/volmer/bootsy/tree/master/config/locales). It is also necessary to add a translation for Bootstrap-wysihtml5, the javascript editor, in your assets pipeline. Instructions [here](https://github.com/jhollingworth/bootstrap-wysihtml5#i18n). If you are using the alert for unsaved changes, you have to define a translation for it as well. Just follow [this example](https://github.com/volmer/bootsy/tree/master/app/assets/bootsy/locales/bootsy.pt-BR.js).\r\n\r\n\r\n## Mongoid support\r\n\r\nBy default, Bootsy only supports ActiveRecord. In order to use Bootsy with Mongoid, please use [Bootsy-Mongoid](https://github.com/volmer/bootsy-mongoid) instead.\r\n\r\n\r\n## Bootsy with SimpleForm\r\n\r\nDo you want to use Bootsy alongside with [SimpleForm](https://github.com/plataformatec/simple_form)? Take a look at [Bootsy-SimpleForm](https://github.com/volmer/bootsy-simple_form).\r\n\r\n\r\n## License\r\n\r\nMIT License. Copyright 2013 Volmer Soares\r\n","google":"UA-40000211-1","note":"Don't delete this file! It's used internally to help with page regeneration."}